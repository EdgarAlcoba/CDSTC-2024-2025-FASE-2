/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/NimblePeak.glb 
*/

import React, { useLayoutEffect, useRef } from 'react'
import { useGLTF, useScroll } from '@react-three/drei'
import gsap from 'gsap';
import { useFrame } from '@react-three/fiber';

export function NimblePeak(props) {
  const { nodes, materials } = useGLTF('./models/NimblePeak.glb');

  const FLOOR_HEIGHT = 0.05;
  const NB_FLOORS = 3;

  const ref = useRef();
  const tl = useRef();

  const scroll = useScroll();

  useFrame(() => {
    tl.current.seek(scroll.offset * tl.current.duration());
  });

  useLayoutEffect(() => {
    tl.current = gsap.timeline();

    // position 0
    tl.current.to(
      ref.current.position,
      {
        duration: 1,
        y: -FLOOR_HEIGHT * (NB_FLOORS - 1),
      },
      0,
    );

    tl.current.to(
      ref.current.rotation,
      {
        duration: 1.4,
        y: 0,
      },
      0,
    );

    // position 1
    tl.current.to(
      ref.current.position,
      {
        duration: 1,
        y: -FLOOR_HEIGHT * (NB_FLOORS - 1),
        x: 0.1,
        z: 0.3

      },
      0,
    );

    // position 2
    tl.current.to(
      ref.current.position,
      {
        duration: 1,
        y: -FLOOR_HEIGHT * (NB_FLOORS - 1),
        x: 0.3,
        z: -0.2
      },
      1.5,
    );

    tl.current.to(
      ref.current.rotation,
      {
        duration: 1.5,
        y: -Math.PI * 3 / 4,
      },
      1.5,
    );
  }, []);

  return (
    <group {...props} dispose={null} ref={ref} position={[0.3, 0, 0]} rotation={[0, -Math.PI * 3 / 4, 0]}>
      <mesh geometry={nodes['Node-Mesh'].geometry} material={materials.mat16} />
      <mesh geometry={nodes['Node-Mesh_1'].geometry} material={materials.mat21} />
      <mesh geometry={nodes['Node-Mesh_2'].geometry} material={materials.mat9} />
      <mesh geometry={nodes['Node-Mesh_3'].geometry} material={materials.mat18} />
      <mesh geometry={nodes['Node-Mesh_4'].geometry} material={materials.mat20} />
      <mesh geometry={nodes['Node-Mesh_5'].geometry} material={materials.mat10} />
      <mesh geometry={nodes['Node-Mesh_6'].geometry} material={materials.mat22} />
      <mesh geometry={nodes['Node-Mesh_7'].geometry} material={materials.mat15} />
      <mesh geometry={nodes['Node-Mesh_8'].geometry} material={materials.mat19} />
    </group>
  )
}

useGLTF.preload('./models/NimblePeak.glb')
